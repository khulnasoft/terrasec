package vulnerability

import (
	"reflect"
	"testing"
)

func TestGetImageDetails(t *testing.T) {
	type args struct {
		image        string
		imageDetails ImageDetails
	}
	tests := []struct {
		name string
		args args
		want ImageDetails
	}{
		{
			name: "gcr image without tag and digest",
			args: args{
				image:        "gcr.io/terrasec-test",
				imageDetails: ImageDetails{},
			},
			want: ImageDetails{
				Registry:   "gcr.io",
				Repository: "terrasec-test",
			},
		},
		{
			name: "gcr image with tag and digest",
			args: args{
				image:        "gcr.io/terrasec-test:test@sha256:3f13b4376446cf92b0cb9a5c4",
				imageDetails: ImageDetails{},
			},
			want: ImageDetails{
				Registry:   "gcr.io",
				Repository: "terrasec-test",
				Tag:        "test",
				Digest:     "sha256:3f13b4376446cf92b0cb9a5c4",
			},
		},
		{
			name: "gcr image with tag",
			args: args{
				image:        "gcr.io/terrasec-test:test",
				imageDetails: ImageDetails{},
			},
			want: ImageDetails{
				Registry:   "gcr.io",
				Repository: "terrasec-test",
				Tag:        "test",
			},
		},
		{
			name: "gcr image with Digest",
			args: args{
				image:        "gcr.io/terrasec-test@sha256:3f13b4376446cf92b0cb9a5c4",
				imageDetails: ImageDetails{},
			},
			want: ImageDetails{
				Registry:   "gcr.io",
				Repository: "terrasec-test",
				Digest:     "sha256:3f13b4376446cf92b0cb9a5c4",
			},
		},
		{
			name: "ecr image without tag and digest",
			args: args{
				image:        "245578968.dkr.ecr.us-east-2.amazonaws.com/terrasec-test",
				imageDetails: ImageDetails{},
			},
			want: ImageDetails{
				Registry:   "245578968.dkr.ecr.us-east-2.amazonaws.com",
				Repository: "terrasec-test",
			},
		},
		{
			name: "ecr image with tag and digest",
			args: args{
				image:        "245578968.dkr.ecr.us-east-2.amazonaws.com/terrasec-test:test@sha256:3f13b4376446cf92b0cb9a5c4",
				imageDetails: ImageDetails{},
			},
			want: ImageDetails{
				Registry:   "245578968.dkr.ecr.us-east-2.amazonaws.com",
				Repository: "terrasec-test",
				Tag:        "test",
				Digest:     "sha256:3f13b4376446cf92b0cb9a5c4",
			},
		},
		{
			name: "ecr image with tag",
			args: args{
				image:        "245578968.dkr.ecr.us-east-2.amazonaws.com/terrasec-test:test",
				imageDetails: ImageDetails{},
			},
			want: ImageDetails{
				Registry:   "245578968.dkr.ecr.us-east-2.amazonaws.com",
				Repository: "terrasec-test",
				Tag:        "test",
			},
		},
		{
			name: "ecr image with  digest",
			args: args{
				image:        "245578968.dkr.ecr.us-east-2.amazonaws.com/terrasec-test@sha256:3f13b4376446cf92b0cb9a5c4",
				imageDetails: ImageDetails{},
			},
			want: ImageDetails{
				Registry:   "245578968.dkr.ecr.us-east-2.amazonaws.com",
				Repository: "terrasec-test",
				Digest:     "sha256:3f13b4376446cf92b0cb9a5c4",
			},
		},
		{
			name: "acr image without tag and digest",
			args: args{
				image:        "test.azurecr.io/terrasec-test",
				imageDetails: ImageDetails{},
			},
			want: ImageDetails{
				Registry:   "test.azurecr.io",
				Repository: "terrasec-test",
			},
		},
		{
			name: "acr image with tag and digest",
			args: args{
				image:        "test.azurecr.io/terrasec-test:test@sha256:3f13b4376446cf92b0cb9a5c4",
				imageDetails: ImageDetails{},
			},
			want: ImageDetails{
				Registry:   "test.azurecr.io",
				Repository: "terrasec-test",
				Tag:        "test",
				Digest:     "sha256:3f13b4376446cf92b0cb9a5c4",
			},
		},
		{
			name: "acr image with tag",
			args: args{
				image:        "test.azurecr.io/terrasec-test:test",
				imageDetails: ImageDetails{},
			},
			want: ImageDetails{
				Registry:   "test.azurecr.io",
				Repository: "terrasec-test",
				Tag:        "test",
			},
		},
		{
			name: "acr image with Digest",
			args: args{
				image:        "test.azurecr.io/terrasec-test@sha256:3f13b4376446cf92b0cb9a5c4",
				imageDetails: ImageDetails{},
			},
			want: ImageDetails{
				Registry:   "test.azurecr.io",
				Repository: "terrasec-test",
				Digest:     "sha256:3f13b4376446cf92b0cb9a5c4",
			},
		},
		{
			name: "harbor image with tag",
			args: args{
				image:        "terrasec.com/test/terrasec:test",
				imageDetails: ImageDetails{},
			},
			want: ImageDetails{
				Registry:   "terrasec.com",
				Repository: "test/terrasec",
				Tag:        "test",
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := GetImageDetails(tt.args.image, tt.args.imageDetails); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("GetImageDetails() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestGetDomain(t *testing.T) {
	type args struct {
		image string
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{name: "get gcr image domain",
			args: args{image: "gcr.io/terrasec-test"},
			want: "gcr.io",
		},
		{name: "get acr image domain",
			args: args{image: "test.azurecr.io/terrasec-test"},
			want: "test.azurecr.io",
		},
		{name: "get ecr image domain",
			args: args{image: "245578968.dkr.ecr.us-east-2.amazonaws.com/terrasec-test"},
			want: "245578968.dkr.ecr.us-east-2.amazonaws.com",
		},
		{name: "invalid image domain reference",
			args: args{image: ""},
			want: "",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := GetDomain(tt.args.image); got != tt.want {
				t.Errorf("GetDomain() = %v, want %v", got, tt.want)
			}
		})
	}
}
