package vulnerability_test

import (
	"io"
	"os"
	"path/filepath"

	vulnUtils "github.com/khulnasoft/terrasec/test/e2e/vulnerability"
	"github.com/khulnasoft/terrasec/test/helper"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"github.com/onsi/gomega/gbytes"
)

var (
	terrasecBinaryPath   string
	iacRootRelPath       = filepath.Join("..", "test_data", "iac")
	policyRootRelPath    = filepath.Join("..", "test_data", "policies")
	outWriter, errWriter io.Writer
	tempFile             *os.File
	err                  error
)

const (
	googleApplicationKeyTestEnvName = "GOOGLE_APPLICATION_CREDENTIALS_TEST_SECRET"
	googleApplicationKeyEnvName     = "GOOGLE_APPLICATION_CREDENTIALS"
	azureAuthKeyTestEnvName         = "AZURE_AUTH_TEST_SECRET"
	azureAuthKeyEnvName             = "AZURE_AUTH_LOCATION"
)

var _ = Describe("Vulnerability", func() {

	BeforeSuite(func() {
		terrasecBinaryPath = helper.GetTerrasecBinaryPath()
	})

	BeforeEach(func() {
		outWriter = gbytes.NewBuffer()
		errWriter = gbytes.NewBuffer()
	})

	AfterEach(func() {
		outWriter = nil
		errWriter = nil
	})

	Describe("resource with container images to be scanned for vulnerabilities", func() {
		resourceVulnerabilityIacRelPath := filepath.Join(iacRootRelPath, "resource_for_vulnerability_scan")
		Context("resource with aws ecr registry image used which has vulnerabilities", func() {
			iacDir := filepath.Join(resourceVulnerabilityIacRelPath, "aws_ecr_registry_used_in_resource")
			PIt("should display vulnerabilities and vulnerability count should be present in scan summary", func() {
				scanArgs := []string{"-p", policyRootRelPath, "-i", "terraform", "-d", iacDir, "-o", "json"}
				// exit code is zero since no violations are present for resource
				vulnUtils.RunScanAndVerifyVulnerabilityCount(terrasecBinaryPath, helper.ExitCodeZero, 1, outWriter, errWriter, scanArgs...)
			})
		})
		Context("resource with azure registry image used which has vulnerabilities", func() {
			iacDir := filepath.Join(resourceVulnerabilityIacRelPath, "azure_registry_used_in_resource")
			JustBeforeEach(func() {
				data := os.Getenv(azureAuthKeyTestEnvName)
				if data != "" {
					tempFile, err = os.CreateTemp("", "azure.auth")
					Expect(err).NotTo(HaveOccurred())
					tempFile.Write([]byte(data))
					os.Setenv(azureAuthKeyEnvName, tempFile.Name())
				}
			})
			JustAfterEach(func() {
				if tempFile != nil && tempFile.Name() != "" {
					os.Remove(tempFile.Name())
				}
			})
			PIt("should display vulnerabilities and  vulnerability count should be present in scan summary", func() {
				scanArgs := []string{"-p", policyRootRelPath, "-i", "terraform", "-d", iacDir, "-o", "json"}
				// exit code is zero since no violations are present for resource
				vulnUtils.RunScanAndVerifyVulnerabilityCount(terrasecBinaryPath, helper.ExitCodeZero, 1, outWriter, errWriter, scanArgs...)
			})
		})
		Context("resource with google registry image used which has vulnerabilities", func() {
			iacDir := filepath.Join(resourceVulnerabilityIacRelPath, "google_gcr_registry_used_in_resource")
			JustBeforeEach(func() {
				data := os.Getenv(googleApplicationKeyTestEnvName)
				if data != "" {
					tempFile, err = os.CreateTemp("", "app-key.json")
					Expect(err).NotTo(HaveOccurred())
					tempFile.Write([]byte(data))
					os.Setenv(googleApplicationKeyEnvName, tempFile.Name())
				}
			})
			JustAfterEach(func() {
				if tempFile != nil && tempFile.Name() != "" {
					os.Remove(tempFile.Name())
				}
			})
			PIt("should display vulnerabilities and  vulnerability count should be present in scan summary", func() {
				scanArgs := []string{"-p", policyRootRelPath, "-i", "k8s", "-d", iacDir, "-o", "json"}
				// exit code is zero since no violations are present for resource
				vulnUtils.RunScanAndVerifyVulnerabilityCount(terrasecBinaryPath, helper.ExitCodeZero, 1, outWriter, errWriter, scanArgs...)
			})
		})
	})
})
