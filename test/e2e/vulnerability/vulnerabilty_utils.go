package vulnerability

import (
	"io"
	"time"

	"github.com/khulnasoft/terrasec/test/helper"
	"github.com/onsi/gomega"
	"github.com/onsi/gomega/gexec"
)

const (
	// ScanCommand is terrasec's scan command
	ScanCommand string = "scan"

	// FindVulnerabilityFlag is terrasec's flag used with scan command
	FindVulnerabilityFlag string = "--find-vuln"

	// VulnerabilityScanTimeout is default Vulnerability Scan timeout
	VulnerabilityScanTimeout time.Duration = 2 * time.Minute
)

// RunScanAndVerifyVulnerabilityCount runs the scan command with supplied parameters and checks scan summary output
func RunScanAndVerifyVulnerabilityCount(terrasecBinaryPath string, exitCode, expectedCount int, outWriter, errWriter io.Writer, args ...string) {
	session := RunScanCommandWithFindVulnerability(terrasecBinaryPath, exitCode, outWriter, errWriter, args...)
	helper.CheckSummaryForVulnerabilities(session, expectedCount)
}

// RunScanCommandWithFindVulnerability with --find-vuln flag executes the scan command, validates exit code
func RunScanCommandWithFindVulnerability(terrasecBinaryPath string, exitCode int, outWriter, errWriter io.Writer, args ...string) *gexec.Session {
	argList := []string{ScanCommand, FindVulnerabilityFlag}
	argList = append(argList, args...)
	session := helper.RunCommand(terrasecBinaryPath, outWriter, errWriter, argList...)
	gomega.Eventually(session, VulnerabilityScanTimeout).Should(gexec.Exit(exitCode))
	return session
}
